#
# Create and correct a spherical zeolite cluster
#
# (Actual space group: 62)

# Set most important part
set job mfi 
set originatom 1 
# Central atom

# Set atom centre information
set bondlength 2
# Convert to bohr
set bondlength [ expr $bondlength/0.529 ]
set firstneighbours 3
set secondneighbours 5 
set activeradius 20

set bondlength2 [ expr $bondlength*$bondlength ]
set activeradius2 [ expr $activeradius*$activeradius ]

set firstatoms [ list ]
set secondatoms [ list ]
set activeatoms [ list ]

### NOW TO GO THROUGH AND RENAME ATOMS WITH RESPECT TO POSITIONS

#
# Create and correct a spherical zeolite cluster
#

set nclus [ get_number_of_atoms coords=$job.clus ]

# This code finds the cluster atom corresponding to the 
# origin_atom specified in the construct_cluster command
# It is no longer necessary to use this because the atoms in the cluster
# are now ordered so that atom 1 is the central atom.
# The code has been left in just as a check.

# Centre

set tmp [ get_atom_entry coords=$job.clus atom_number=$originatom ]

puts stdout " Coordinates of central atom in $job.clus: $tmp"
set xorig  [ lindex $tmp 1 ]
set yorig  [ lindex $tmp 2 ]
set zorig  [ lindex $tmp 3 ]

push_banner_flag 0

for { set i 1 } { $i <= $nclus } {incr i } {

    set tmp [ get_atom_entry coords=$job.clus atom_number=$i ]

    set x [ lindex $tmp 1 ]
    set y [ lindex $tmp 2 ]
    set z [ lindex $tmp 3 ]

    # First Centre

    set d2 [ expr ($xorig-$x)*($xorig-$x) + ($yorig-$y)*($yorig-$y) + ($zorig-$z)*($zorig-$z) ]
        
    if { $d2 < $activeradius2 } {

      lappend activeatoms $i 

    }
}

pop_banner_flag

# REPLACE WITH SPECIAL LABEL
set tmp [ get_atom_entry coords=$job.clus atom_number=$originatom ]
set label [ lindex $tmp 0 ]
set newlabel "01"
set newatom " ${label}${newlabel} $xorig $yorig $zorig "
replace_atom_entry coords=$job.clus atom_number=$originatom atom_entry= $newatom

lappend firstatoms $originatom

# SEARCH FOR FIRST NEIGHBOURS I.E. HIGH QUALITY BASIS SET

for { set i 1 } { $i <= $secondneighbours } {incr i } {

    push_banner_flag 0

    set allatoms [ concat $firstatoms $secondatoms ]
    
    foreach atom $allatoms {

        set tmp [ get_atom_entry coords=$job.clus atom_number=$atom ]

        set xorig [ lindex $tmp 1 ]
        set yorig [ lindex $tmp 2 ]
        set zorig [ lindex $tmp 3 ]

        foreach j $activeatoms {

            set tmp [ get_atom_entry coords=$job.clus atom_number=$j ]

            set label [ lindex $tmp 0 ]
            set x [ lindex $tmp 1 ]
            set y [ lindex $tmp 2 ]
            set z [ lindex $tmp 3 ]

            set d2 [ expr ($xorig-$x)*($xorig-$x) + ($yorig-$y)*($yorig-$y) + ($zorig-$z)*($zorig-$z) ]

            if { $d2 < $bondlength2 } {

                if { [ lsearch $allatoms $j ] == -1 } then {
                    lappend allatoms $j

                    if { $i <= $firstneighbours } then {
                        lappend firstatoms $j
                        set newlabel "01"
                    } else {
                        lappend secondatoms $j
                        set newlabel "02"
                    }

                    set newatom " ${label}${newlabel} $x $y $z "
                    replace_atom_entry coords=$job.clus atom_number=$j atom_entry= $newatom
                }
            }
        }
    }

    pop_banner_flag 

    puts stdout "Loop: $i"
    puts stdout "First Neighbours in $job.clus: $firstatoms"
    puts stdout "Second Neighbours in $job.clus: $secondatoms"
    puts stdout "Active Atoms in $job.clus: $activeatoms"
}

push_banner_flag 0

puts stdout "Coordinates of Final Neighbours, for Checking:"

foreach atom $firstatoms {
    set tmp [ get_atom_entry coords=$job.clus atom_number=$atom ]
    puts stdout $tmp
}

puts stdout ""

foreach atom $secondatoms {
    set tmp [ get_atom_entry coords=$job.clus atom_number=$atom ]
    puts stdout $tmp
}

pop_banner_flag

