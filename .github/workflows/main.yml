# This is a basic workflow to help you get started with Actions
name: ci-tests

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    # Ensure we are running Python v3.x
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        # Issues with bdist_wheel on v3.9
        #python-version: '3.x'
        python-version: '3.7'
    
    # Install ASE so we can run our tests 
    - name: Install dependencies
      run: |
        python -m pip install --upgrade ase
        python -m pip install --upgrade pytest
        python -m pip install --upgrade pytest-cov
    
    # Setup Python environment
    - name: Setup Python environment
      run: |
        echo $PWD
        ls -lrt
        # Depreciated
        # echo "::set-env name=PYTHONPATH::/home/runner/work/carmm/carmm"
        echo "name=PYTHONPATH::/home/runner/work/carmm/carmm" >> $GITHUB_ENV
    
    # Runs a set of commands using the runners shell
    # Updated to run on pytest so we might be able to export data
    - name: Run the examples
      run: |
        cd examples
        pytest --cov=../ --cov-report=xml *.py

    # Upload all the data on coverage to CodeCov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./examples/coverage.xml
        flags: unittests
    
